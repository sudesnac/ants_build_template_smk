from os.path import join
import itertools
import pandas as pd

configfile: 'config/config.yml'

#set container for execution
container: config['ants_container']

#load participants.tsv file, and strip off sub- from participant_id column
df = pd.read_table(config['participants_tsv'])
subjects = df.participant_id.to_list() 
subjects = [ s.strip('sub-') for s in subjects ]

#get channels using keys in in_images
channels = list(config['in_images'].keys())

#need this to make sure iterations don't go below 0!
wildcard_constraints:
    iteration="[0-9]+"


localrules: all, gen_init_avg_template, get_existing_template, set_init_template

rule all:
    input:
        avg_template =  expand('results/iter_{iteration}/template_{{channel}}.nii.gz'.format(iteration=config['max_iters']),channel=channels),
        post_reg_template = expand('results/post_reg_to_init_template/template_iter-{iteration}_WarpedToInitTemplate_{{channel}}.nii.gz'.format(iteration=config['max_iters']),channel=channels)


rule gen_init_avg_template:
    input: lambda wildcards: expand(config['in_images'][wildcards.channel],subject=subjects)
    output: 'results/iter_0/init/init_avg_template_{channel}.nii.gz'
    params:
        dim = config['ants']['dim'],
        use_n4 = '1'
    log: 'logs/gen_init_avg_template_{channel}.log'
    shell:
        'AverageImages {params.dim} {output} {params.use_n4} {input} &> {log}'

rule get_existing_template:
    input: lambda wildcards: config['init_template'][wildcards.channel]
    output: 'results/iter_0/init/existing_template_{channel}.nii.gz'
    log: 'logs/get_existing_template_{channel}.log'
    shell: 'cp -v {input} {output} &> {log}'


rule set_init_template:
    input:
        'results/iter_0/init/init_avg_template_{channel}.nii.gz' if config['init_template'] == None else 'results/iter_0/init/existing_template_{channel}.nii.gz'
    params: 
        cmd = lambda wildcards, input, output:
                'ResampleImageBySpacing {dim} {input} {output} {vox_dims}'.format(
                        dim = config['ants']['dim'], input = input, output = output,
                        vox_dims=' '.join([str(d) for d in config['resample_vox_dims']]))
                     if config['resample_init_template'] else f"cp -v {input} {output}"
    output: 'results/iter_0/template_{channel}.nii.gz'
    log: 'logs/set_init_template_{channel}.log'
    shell: '{params.cmd} &> {log}'

rule reg_to_template:
    input: 
        template = lambda wildcards: ['results/iter_{iteration}/template_{channel}.nii.gz'.format(
                                iteration=iteration,channel=channel) for iteration,channel in itertools.product([int(wildcards.iteration)-1],channels)],
        target = lambda wildcards: [config['in_images'][channel] for channel in channels]
    params:
        out_prefix = 'results/iter_{iteration}/sub-{subject}_',
        base_opts = '-d {dim} --float 1 --verbose 1 --random-seed {random_seed}'.format(dim=config['ants']['dim'],random_seed=config['ants']['random_seed']),
        intensity_opts = config['ants']['intensity_opts'],
        init_translation = lambda wildcards, input: '-r [{template},{target},1]'.format(template=input.template[0],target=input.target[0]),
        linear_multires = '-c [{reg_iterations},1e-6,10] -f {shrink_factors} -s {smoothing_factors}'.format(
                                reg_iterations = config['ants']['linear']['reg_iterations'],
                                shrink_factors = config['ants']['linear']['shrink_factors'],
                                smoothing_factors = config['ants']['linear']['smoothing_factors']),
        deform_model = '-t {deform_model}'.format(deform_model = config['ants']['deform']['transform_model']),
        deform_multires = '-c [{reg_iterations},1e-9,10] -f {shrink_factors} -s {smoothing_factors}'.format(
                                reg_iterations = config['ants']['deform']['reg_iterations'],
                                shrink_factors = config['ants']['deform']['shrink_factors'],
                                smoothing_factors = config['ants']['deform']['smoothing_factors']),
        linear_metric = lambda wildcards, input: ['-m MI[{template},{target},1,32,Regular,0.25]'.format(
                                template=template,target=target) for template,target in zip(input.template,input.target) ],
        deform_metric = lambda wildcards, input: ['-m {metric}[{template},{target},1,4]'.format(
                                metric=config['ants']['deform']['sim_metric'],
                                template=template, target=target) for template,target in zip(input.template,input.target) ]
    output:
        warp = 'results/iter_{iteration}/sub-{subject}_1Warp.nii.gz',
        invwarp = 'results/iter_{iteration}/sub-{subject}_1InverseWarp.nii.gz',
        affine = 'results/iter_{iteration}/sub-{subject}_0GenericAffine.mat',
    log: 'logs/reg_to_template/iter_{iteration}_sub-{subject}.log'
    threads: 16
    resources:
        mem_mb = 16000, # right now these are on the high-end -- could implement benchmark rules to do this at some point..
        time = 3*60 # 3 hrs
    shell: 
        'ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS={threads} '
        'antsRegistration {params.base_opts} {params.intensity_opts} '
        '{params.init_translation} ' #initial translation
        '-t Rigid[0.1] {params.linear_metric} {params.linear_multires} ' # rigid registration
        '-t Affine[0.1] {params.linear_metric} {params.linear_multires} ' # affine registration
        '{params.deform_model} {params.deform_metric} {params.deform_multires} '  # deformable registration
        '-o {params.out_prefix} &> {log}'


rule warp_to_template:
    input: 
        template = lambda wildcards: 'results/iter_{iteration}/template_{{channel}}.nii.gz'.format(iteration=int(wildcards.iteration)-1, channel=wildcards.channel),
        target = lambda wildcards: config['in_images'][wildcards.channel],
        warp = 'results/iter_{iteration}/sub-{subject}_1Warp.nii.gz',
        affine = 'results/iter_{iteration}/sub-{subject}_0GenericAffine.mat',
    params:
        base_opts = '-d {dim} --float 1 --verbose 1'.format(dim=config['ants']['dim']),
    output:
        warped = 'results/iter_{iteration}/sub-{subject}_WarpedToTemplate_{channel}.nii.gz'
    log: 'logs/warp_to_template/iter_{iteration}_sub-{subject}_{channel}.log'
    threads: 1
    shell: 
        'ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS={threads} '
        'antsApplyTransforms {params.base_opts} -i {input.target} -o {output.warped} -r {input.template} -t {input.warp} -t {input.affine} &> {log}'

rule avg_warped:
    input: 
        targets = expand('results/iter_{iteration}/sub-{subject}_WarpedToTemplate_{channel}.nii.gz',subject=subjects,allow_missing=True)
    params:
        dim = config['ants']['dim'],
        use_n4 = '1'
    output: 'results/iter_{iteration}/shape_update/avg_warped_{channel}.nii.gz'
    group: 'shape_update'
    log: 'logs/avg_warped/iter_{iteration}_{channel}.log'
    shell:
        'AverageImages {params.dim} {output} {params.use_n4} {input} &> {log}'
       
rule avg_inverse_warps:
    input:
        warps = expand('results/iter_{iteration}/sub-{subject}_1Warp.nii.gz',subject=subjects,allow_missing=True),
    params:
        dim = config['ants']['dim'],
        use_n4 = '0'
    output: 
        invwarp = 'results/iter_{iteration}/shape_update/avg_inverse_warps.nii.gz'
    group: 'shape_update'
    log: 'logs/avg_inverse_warps/iter_{iteration}.log'
    shell:
        'AverageImages {params.dim} {output} {params.use_n4} {input} &> {log}'
         
rule scale_by_gradient_step:
    input: 'results/iter_{iteration}/shape_update/avg_inverse_warps.nii.gz'
    params:
        dim = config['ants']['dim'],
        gradient_step = '-{gradient_step}'.format(gradient_step = config['ants']['shape_update']['gradient_step'])
    output: 'results/iter_{iteration}/shape_update/avg_inverse_warps_scaled.nii.gz'
    group: 'shape_update'
    log: 'logs/scale_by_gradient_step/iter_{iteration}.log'
    shell:
        'MultiplyImages {params.dim} {input} {params.gradient_step} {output} &> {log}' 

rule avg_affine_transforms:
    input: 
        affine = expand('results/iter_{iteration}/sub-{subject}_0GenericAffine.mat',subject=subjects,allow_missing=True),
    params:
        dim = config['ants']['dim']
    output:
        affine = 'results/iter_{iteration}/shape_update/avg_affine.mat'
    group: 'shape_update'
    log: 'logs/avg_affine_transforms/iter_{iteration}.log'
    shell:
        'AverageAffineTransformNoRigid {params.dim} {output} {input} &> {log}'

rule transform_inverse_warp:
    input:
        affine = 'results/iter_{iteration}/shape_update/avg_affine.mat',
        invwarp = 'results/iter_{iteration}/shape_update/avg_inverse_warps_scaled.nii.gz',
        ref = lambda wildcards: 'results/iter_{iteration}/shape_update/avg_warped_{channel}.nii.gz'.format(iteration=wildcards.iteration,channel=channels[0]) #just use 1st channel as ref
    params:
        dim = '-d {dim}'.format(dim = config['ants']['dim'])
    output: 
        invwarp = 'results/iter_{iteration}/shape_update/avg_inverse_warps_scaled_transformed.nii.gz'
    group: 'shape_update'
    log: 'logs/transform_inverse_warp/iter_{iteration}.log'
    shell:
        'antsApplyTransforms {params.dim} -e vector -i {input.invwarp} -o {output} -t [{input.affine},1] -r {input.ref} --verbose 1 &> {log}'

rule apply_template_update:
    input:
        template =  'results/iter_{iteration}/shape_update/avg_warped_{channel}.nii.gz',
        affine = 'results/iter_{iteration}/shape_update/avg_affine.mat',
        invwarp = 'results/iter_{iteration}/shape_update/avg_inverse_warps_scaled_transformed.nii.gz'
    params:
        dim = '-d {dim}'.format(dim = config['ants']['dim'])
    output:
        template =  'results/iter_{iteration}/template_{channel}.nii.gz'
    log: 'logs/apply_template_update/iter_{iteration}_{channel}.log'
    group: 'shape_update'
    shell:
        'antsApplyTransforms {params.dim} --float 1 --verbose 1 -i {input.template} -o {output.template} -t [{input.affine},1] '
        ' -t {input.invwarp} -t {input.invwarp} -t {input.invwarp} -t {input.invwarp} -r {input.template} &> {log}' #apply warp 4 times

rule post_reg_to_init_template:
    input: 
        moving =  lambda wildcards: expand('results/iter_{iteration}/template_{{channel}}.nii.gz'.format(iteration=wildcards.iteration),channel=channels),
        fixed = expand('results/iter_0/init/existing_template_{channel}.nii.gz',channel=channels)
    params:
        out_prefix = lambda wildcards: 'results/post_reg_to_init_template/template_iter-{iteration}_'.format(iteration=wildcards.iteration),
        base_opts = '-d {dim} --float 1 --verbose 1 --random-seed {random_seed}'.format(dim=config['ants']['dim'],random_seed=config['ants']['random_seed']),
        intensity_opts = config['ants']['intensity_opts'],
        init_translation = lambda wildcards, input: '-r [{fixed},{moving},1]'.format(fixed=input.fixed[0],moving=input.moving[0]),
        linear_multires = '-c [{reg_iterations},1e-6,10] -f {shrink_factors} -s {smoothing_factors}'.format(
                                reg_iterations = config['ants']['linear']['reg_iterations'],
                                shrink_factors = config['ants']['linear']['shrink_factors'],
                                smoothing_factors = config['ants']['linear']['smoothing_factors']),
        deform_model = '-t {deform_model}'.format(deform_model = config['ants']['deform']['transform_model']),
        deform_multires = '-c [{reg_iterations},1e-9,10] -f {shrink_factors} -s {smoothing_factors}'.format(
                                reg_iterations = config['ants']['deform']['reg_iterations'],
                                shrink_factors = config['ants']['deform']['shrink_factors'],
                                smoothing_factors = config['ants']['deform']['smoothing_factors']),
        linear_metric = lambda wildcards, input: ['-m MI[{fixed},{moving},1,32,Regular,0.25]'.format(
                                fixed=fixed,moving=moving) for fixed,moving in zip(input.fixed,input.moving) ],
        deform_metric = lambda wildcards, input: ['-m {metric}[{fixed},{moving},1,4]'.format(
                                metric=config['ants']['deform']['sim_metric'],
                                fixed=fixed, moving=moving) for fixed,moving in zip(input.fixed,input.moving) ]
    output:
        warp = 'results/post_reg_to_init_template/template_iter-{iteration}_1Warp.nii.gz',
        invwarp = 'results/post_reg_to_init_template/template_iter-{iteration}_1InverseWarp.nii.gz',
        affine = 'results/post_reg_to_init_template/template_iter-{iteration}_0GenericAffine.mat'
    log: 'logs/post_reg_to_init_template/iter_{iteration}.log'
    threads: 16
    resources:
        mem_mb = 8000, #should try to calculate this based on image size.. 
        time = 60 # 1 hr
    shell: 
        'ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS={threads} '
        'antsRegistration {params.base_opts} {params.intensity_opts} '
        '{params.init_translation} ' #initial translation
        '-t Rigid[0.1] {params.linear_metric} {params.linear_multires} ' # rigid registration
        '-t Affine[0.1] {params.linear_metric} {params.linear_multires} ' # affine registration
        '{params.deform_model} {params.deform_metric} {params.deform_multires} '  # deformable registration
        '-o {params.out_prefix} &> {log}'


rule post_warp_to_init_template:
    input: 
        moving = 'results/iter_{iteration}/template_{channel}.nii.gz',
        fixed = 'results/iter_0/init/existing_template_{channel}.nii.gz',
        warp = 'results/post_reg_to_init_template/template_iter-{iteration}_1Warp.nii.gz',
        affine = 'results/post_reg_to_init_template/template_iter-{iteration}_0GenericAffine.mat'
    params:
        base_opts = '-d {dim} --float 1 --verbose 1'.format(dim=config['ants']['dim']),
    output:
        warped = 'results/post_reg_to_init_template/template_iter-{iteration}_WarpedToInitTemplate_{channel}.nii.gz'
    log: 'logs/post_warp_to_init_template/template_iter_{iteration}_{channel}.log'
    threads: 1
    shell: 
        'ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS={threads} '
        'antsApplyTransforms {params.base_opts} -i {input.moving} -o {output.warped} -r {input.fixed} -t {input.warp} -t {input.affine} &> {log}'


    

